diff --git a/CMakeLists.txt b/CMakeLists.txt
index aa33a5cc0..3fc7ff922 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -557,6 +557,9 @@ else()
   elseif(IOS AND ARCH STREQUAL "arm64")
     message(STATUS "IOS: Changing arch from arm64 to armv8")
     set(ARCH_FLAG "-march=armv8")
+  elseif(IOS AND ARCH STREQUAL "x86_64")
+    message(STATUS "IOS: Changing arch from x86_64 to x86-64")
+    set(ARCH_FLAG "-march=x86-64")
   else()
     set(ARCH_FLAG "-march=${ARCH}")
     if(ARCH STREQUAL "native")
diff --git a/CMakeLists_IOS.txt b/CMakeLists_IOS.txt
index 9273af19f..421414bc5 100644
--- a/CMakeLists_IOS.txt
+++ b/CMakeLists_IOS.txt
@@ -26,6 +26,7 @@ set (CMAKE_SYSTEM_VERSION 1)
 set (UNIX True)
 set (APPLE True)
 set (IOS True)
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D IOS")
 
 # Required as of cmake 2.8.10
 set (CMAKE_OSX_DEPLOYMENT_TARGET "" CACHE STRING "Force unset of the deployment target for iOS" FORCE)
diff --git a/cmake/CheckTrezor.cmake b/cmake/CheckTrezor.cmake
index 6aabdda36..c5db7b551 100644
--- a/cmake/CheckTrezor.cmake
+++ b/cmake/CheckTrezor.cmake
@@ -31,7 +31,7 @@ function(_trezor_protobuf_fix_vars)
 endfunction()
 
 # Use Trezor master switch
-if (USE_DEVICE_TREZOR)
+if (0)
     # Protobuf is required to build protobuf messages for Trezor
     include(FindProtobuf OPTIONAL)
     find_package(Protobuf)
diff --git a/src/crypto/cn_heavy_hash.hpp b/src/crypto/cn_heavy_hash.hpp
index bc522d6ae..8c08dbd26 100644
--- a/src/crypto/cn_heavy_hash.hpp
+++ b/src/crypto/cn_heavy_hash.hpp
@@ -57,7 +57,7 @@
 #define HAS_INTEL_HW
 #endif
 
-#if defined(__aarch64__)
+#if (0)
 #pragma GCC target ("+crypto")
 #include <sys/auxv.h>
 #include <asm/hwcap.h>
diff --git a/src/crypto/rx-slow-hash.c b/src/crypto/rx-slow-hash.c
index 59bd89d13..5db8b1a49 100644
--- a/src/crypto/rx-slow-hash.c
+++ b/src/crypto/rx-slow-hash.c
@@ -115,18 +115,7 @@ static void cpuid(int CPUInfo[4], int InfoType)
 }
 static inline int check_aes_hw(void)
 {
-#if defined(__x86_64__)
-    int cpuid_results[4];
-    static int supported = -1;
-
-    if(supported >= 0)
-        return supported;
-
-    cpuid(cpuid_results,1);
-    return supported = cpuid_results[2] & (1 << 25);
-#else
     return 0;
-#endif
 }
 
 static volatile int use_rx_jit_flag = -1;
@@ -189,171 +178,22 @@ typedef struct seedinfo {
 
 static CTHR_THREAD_RTYPE rx_seedthread(void *arg) {
   seedinfo *si = arg;
-  randomx_init_dataset(rx_dataset, si->si_cache, si->si_start, si->si_count);
   CTHR_THREAD_RETURN;
 }
 
 static void rx_initdata(randomx_cache *rs_cache, const int miners, const uint64_t seedheight) {
-  if (miners > 1) {
-    unsigned long delta = randomx_dataset_item_count() / miners;
-    unsigned long start = 0;
-    int i;
-    seedinfo *si;
-    CTHR_THREAD_TYPE *st;
-    si = malloc(miners * sizeof(seedinfo));
-    if (si == NULL)
-      local_abort("Couldn't allocate RandomX mining threadinfo");
-    st = malloc(miners * sizeof(CTHR_THREAD_TYPE));
-    if (st == NULL) {
-      free(si);
-      local_abort("Couldn't allocate RandomX mining threadlist");
-    }
-    for (i=0; i<miners-1; i++) {
-      si[i].si_cache = rs_cache;
-      si[i].si_start = start;
-      si[i].si_count = delta;
-      start += delta;
-    }
-    si[i].si_cache = rs_cache;
-    si[i].si_start = start;
-    si[i].si_count = randomx_dataset_item_count() - start;
-    for (i=1; i<miners; i++) {
-      CTHR_THREAD_CREATE(st[i], rx_seedthread, &si[i]);
-    }
-    randomx_init_dataset(rx_dataset, rs_cache, 0, si[0].si_count);
-    for (i=1; i<miners; i++) {
-      CTHR_THREAD_JOIN(st[i]);
-    }
-    free(st);
-    free(si);
-  } else {
-    randomx_init_dataset(rx_dataset, rs_cache, 0, randomx_dataset_item_count());
-  }
   rx_dataset_height = seedheight;
 }
 
 void rx_slow_hash(const uint64_t mainheight, const uint64_t seedheight, const char *seedhash, const void *data, size_t length,
   char *hash, int miners, int is_alt) {
-  uint64_t s_height = rx_seedheight(mainheight);
-  int toggle = (s_height & SEEDHASH_EPOCH_BLOCKS) != 0;
-  randomx_flags flags = RANDOMX_FLAG_DEFAULT;
-  rx_state *rx_sp;
-  randomx_cache *cache;
-
-  CTHR_MUTEX_LOCK(rx_mutex);
-
-  /* if alt block but with same seed as mainchain, no need for alt cache */
-  if (is_alt) {
-    if (s_height == seedheight && !memcmp(rx_s[toggle].rs_hash, seedhash, HASH_SIZE))
-      is_alt = 0;
-  } else {
-  /* RPC could request an earlier block on mainchain */
-    if (s_height > seedheight)
-      is_alt = 1;
-    /* miner can be ahead of mainchain */
-    else if (s_height < seedheight)
-      toggle ^= 1;
-  }
-
-  toggle ^= (is_alt != 0);
-
-  rx_sp = &rx_s[toggle];
-  CTHR_MUTEX_LOCK(rx_sp->rs_mutex);
-  CTHR_MUTEX_UNLOCK(rx_mutex);
-
-  cache = rx_sp->rs_cache;
-  if (cache == NULL) {
-    if (use_rx_jit())
-      flags |= RANDOMX_FLAG_JIT;
-    if (cache == NULL) {
-      cache = randomx_alloc_cache(flags | RANDOMX_FLAG_LARGE_PAGES);
-      if (cache == NULL) {
-        mdebug(RX_LOGCAT, "Couldn't use largePages for RandomX cache");
-        cache = randomx_alloc_cache(flags);
-      }
-      if (cache == NULL)
-        local_abort("Couldn't allocate RandomX cache");
-    }
-  }
-  if (rx_sp->rs_height != seedheight || rx_sp->rs_cache == NULL || memcmp(seedhash, rx_sp->rs_hash, HASH_SIZE)) {
-    randomx_init_cache(cache, seedhash, HASH_SIZE);
-    rx_sp->rs_cache = cache;
-    rx_sp->rs_height = seedheight;
-    memcpy(rx_sp->rs_hash, seedhash, HASH_SIZE);
-  }
-  if (rx_vm == NULL) {
-    randomx_flags flags = RANDOMX_FLAG_DEFAULT;
-    if (use_rx_jit()) {
-      flags |= RANDOMX_FLAG_JIT;
-      if (!miners)
-          flags |= RANDOMX_FLAG_SECURE;
-    }
-    if(!force_software_aes() && check_aes_hw())
-      flags |= RANDOMX_FLAG_HARD_AES;
-    if (miners) {
-      CTHR_MUTEX_LOCK(rx_dataset_mutex);
-      if (rx_dataset == NULL) {
-        rx_dataset = randomx_alloc_dataset(RANDOMX_FLAG_LARGE_PAGES);
-        if (rx_dataset == NULL) {
-          mdebug(RX_LOGCAT, "Couldn't use largePages for RandomX dataset");
-          rx_dataset = randomx_alloc_dataset(RANDOMX_FLAG_DEFAULT);
-        }
-        if (rx_dataset != NULL)
-          rx_initdata(rx_sp->rs_cache, miners, seedheight);
-      }
-      if (rx_dataset != NULL)
-        flags |= RANDOMX_FLAG_FULL_MEM;
-      else {
-        miners = 0;
-        mwarning(RX_LOGCAT, "Couldn't allocate RandomX dataset for miner");
-      }
-      CTHR_MUTEX_UNLOCK(rx_dataset_mutex);
-    }
-    rx_vm = randomx_create_vm(flags | RANDOMX_FLAG_LARGE_PAGES, rx_sp->rs_cache, rx_dataset);
-    if(rx_vm == NULL) { //large pages failed
-      mdebug(RX_LOGCAT, "Couldn't use largePages for RandomX VM");
-      rx_vm = randomx_create_vm(flags, rx_sp->rs_cache, rx_dataset);
-    }
-    if(rx_vm == NULL) {//fallback if everything fails
-      flags = RANDOMX_FLAG_DEFAULT | (miners ? RANDOMX_FLAG_FULL_MEM : 0);
-      rx_vm = randomx_create_vm(flags, rx_sp->rs_cache, rx_dataset);
-    }
-    if (rx_vm == NULL)
-      local_abort("Couldn't allocate RandomX VM");
-  } else if (miners) {
-    CTHR_MUTEX_LOCK(rx_dataset_mutex);
-    if (rx_dataset != NULL && rx_dataset_height != seedheight)
-      rx_initdata(cache, miners, seedheight);
-    CTHR_MUTEX_UNLOCK(rx_dataset_mutex);
-  } else {
-    /* this is a no-op if the cache hasn't changed */
-    randomx_vm_set_cache(rx_vm, rx_sp->rs_cache);
-  }
-  /* mainchain users can run in parallel */
-  if (!is_alt)
-    CTHR_MUTEX_UNLOCK(rx_sp->rs_mutex);
-  randomx_calculate_hash(rx_vm, data, length, hash);
-  /* altchain slot users always get fully serialized */
-  if (is_alt)
-    CTHR_MUTEX_UNLOCK(rx_sp->rs_mutex);
 }
 
 void rx_slow_hash_allocate_state(void) {
 }
 
 void rx_slow_hash_free_state(void) {
-  if (rx_vm != NULL) {
-    randomx_destroy_vm(rx_vm);
-    rx_vm = NULL;
-  }
 }
 
 void rx_stop_mining(void) {
-  CTHR_MUTEX_LOCK(rx_dataset_mutex);
-  if (rx_dataset != NULL) {
-    randomx_dataset *rd = rx_dataset;
-    rx_dataset = NULL;
-    randomx_release_dataset(rd);
-  }
-  CTHR_MUTEX_UNLOCK(rx_dataset_mutex);
 }
diff --git a/src/wallet/CMakeLists.txt b/src/wallet/CMakeLists.txt
index 4b052ec44..46f2b1603 100644
--- a/src/wallet/CMakeLists.txt
+++ b/src/wallet/CMakeLists.txt
@@ -75,7 +75,7 @@ target_link_libraries(wallet
   PRIVATE
     ${EXTRA_LIBRARIES})
 
-if (NOT LOKI_DAEMON_AND_WALLET_ONLY)
+if (0)
   set(wallet_rpc_sources
     wallet_rpc_server.cpp)
 
